/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_4ACCBAA__
#define __PLUGINEDITOR_H_4ACCBAA__

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"


//==============================================================================
/** This is the editor component that our filter will display.
*/
class JuceDemoPluginAudioProcessorEditor  :
public AudioProcessorEditor,
//private ComboBox::Listener,
private Slider::Listener,
private ToggleButton::Listener
//private Timer,
//private MidiInputCallback
{
public:
    JuceDemoPluginAudioProcessorEditor (JuceDemoPluginAudioProcessor&);
    ~JuceDemoPluginAudioProcessorEditor();

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;
//    void timerCallback() override;
    void sliderValueChanged (Slider* slider) override;
    void buttonClicked(Button* button) override;
//    void handleIncomingMidiMessage (MidiInput*, const MidiMessage& message) override;


//    class ParameterSlider;

    MidiKeyboardComponent keyboardComponent;
//    AudioDeviceManager audioDeviceManager;
//    MidiInput midiInput;
//    MidiMessageCollector& midiCollector;
   
    
    
    Slider attackSlider, decaySlider, sustainSlider, releaseSlider, cutoffSlider, QSlider, vibratoRateSlider, vibratoStrengthSlider, vibratoPhaseSlider, tremeloRateSlider, tremeloStrengthSlider, tremeloPhaseSlider;
    ToggleButton tremeloOffButton, vibratoOffButton,tremeloOnButton, vibratoOnButton, tremeloMWOnButton, vibratoMWOnButton, learnButton;
    
//    ComboBox midiInputList;
    
    
    int /*lastMidiInputIndex,*/ assignCC, attackCC, decayCC, sustainCC, releaseCC, cutoffCC, QCC, vibratoRateCC, vibratoPhaseCC, vibratoStrengthCC, tremeloRateCC, tremeloPhaseCC, tremeloStrengthCC;
    
    int learning;
    
    float modWheel;  // attackMin, attackMax,...

 private:
    
    Label /*midiInputListLabel,*/ attackLabel, decayLabel, sustainLabel, releaseLabel, cutoffLabel, QLabel, vibratoRateLabel, vibratoStrengthLabel, vibratoOnLabel, vibratoOffLabel, tremeloRateLabel, tremeloStrengthLabel, tremeloOnLabel, tremeloOffLabel, vibratoMWOnLabel, tremeloMWOnLabel, vibratoPhaseLabel, tremeloPhaseLabel, vibratoLabel, tremeloLabel, learnButtonLabel;

    const int labelWidth = 70;
    const int knobDiameter = 50;
    const int spacing = 15;
    
//    Label timecodeDisplayLabel, gainLabel, delayLabel;
//    ScopedPointer<ParameterSlider> gainSlider, delaySlider;

    //==============================================================================
    JuceDemoPluginAudioProcessor& getProcessor() const
    {
        return static_cast<JuceDemoPluginAudioProcessor&> (processor);
    }
    
    

    void updateTimecodeDisplay (AudioPlayHead::CurrentPositionInfo);
    
};


#endif  // __PLUGINEDITOR_H_4ACCBAA__
